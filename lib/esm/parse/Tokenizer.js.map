{"version":3,"file":"Tokenizer.js","sources":["../../../src/parse/Tokenizer.js"],"sourcesContent":["import {\n  MissingArgument,\n  InvalidArgument,\n  InvalidVcard,\n} from \"../errors/index.js\";\n\nexport class Tokenizer {\n  static identifier = \"Tokenizer\";\n\n  #_unfoldedVcard;\n\n  //Credit for the following regex goes to Jonas Hermsmeier, who got it from Jeff Roberson and added capture groups\n  #uriRegExp = new RegExp(\n    \"([A-Za-z][A-Za-z0-9+\\\\-.]*):(?:(//)(?:((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?((?:\\\\[(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}|::(?:[0-9A-Fa-f]{1,4}:){5}|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::)(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|[Vv][0-9A-Fa-f]+\\\\.[A-Za-z0-9\\\\-._~!$&'()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*))(?::([0-9]*))?((?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|/((?:(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)?)|((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|)(?:\\\\?((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?(?:\\\\#((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?\"\n  );\n\n  get numberOfVcards() {\n    return (this.#_unfoldedVcard.match(/BEGIN:VCARD\\r\\n/gi) ?? []).length || 1;\n  }\n\n  #backCount(chr, str) {\n    if (typeof chr === \"undefined\" || typeof str === \"undefined\")\n      throw new MissingArgument(\n        \"Character and string for this.#backCount must be supplied\"\n      );\n\n    if (typeof chr !== \"string\" || typeof str !== \"string\")\n      throw new InvalidArgument(\n        \"Character and string for this.#backCount must be of type string\"\n      );\n\n    let count = 0;\n\n    for (let index = str.length - 1; index >= 0; index--) {\n      if (str[index] === chr) count++;\n      else break;\n    }\n\n    return count;\n  }\n\n  #separateVcardContentLines() {\n    if (this.numberOfVcards === 1)\n      return this.#_unfoldedVcard.split(\"\\r\\n\").filter((vcard) => vcard !== \"\");\n\n    return this.#_unfoldedVcard\n      .split(/BEGIN:VCARD\\r\\n/gi)\n      .filter((vcard) => vcard !== \"\")\n      .map((vcard) =>\n        (\"BEGIN:VCARD\\r\\n\" + vcard)\n          .split(\"\\r\\n\")\n          .filter((vcard) => vcard !== \"\")\n      );\n  }\n\n  #valueSeparator(value) {\n    if (this.#uriRegExp.test(value)) return value;\n\n    const quotedValues = [];\n    let quotedValueIndex = 0;\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '\"') {\n        if (typeof quotedValues[quotedValueIndex] !== \"object\")\n          quotedValues[quotedValueIndex] = {\n            start: index,\n          };\n        else if (typeof quotedValues[quotedValueIndex] === \"object\") {\n          quotedValues[quotedValueIndex][\"stop\"] = index;\n          quotedValueIndex++;\n        }\n      }\n    }\n\n    let parsedValue = [];\n\n    let continueFrom = 0;\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === \";\") {\n        if (\n          quotedValues.some((quotedValue) => {\n            return index > quotedValue.start && index < quotedValue.stop;\n          })\n        )\n          continue;\n\n        const backslashCount = this.#backCount(\n          \"\\\\\",\n          value.substring(continueFrom, index)\n        );\n        if (backslashCount % 2 !== 0) continue;\n\n        parsedValue.push(value.substring(continueFrom, index));\n        continueFrom = index + 1;\n      }\n\n      if (index === value.length - 1)\n        parsedValue.push(value.substring(continueFrom));\n    }\n\n    for (let index = 0; index < parsedValue.length; index++) {\n      const component = parsedValue[index];\n\n      const quotedComponents = [];\n      let quotedComponentIndex = 0;\n      for (let index = 0; index < component.length; index++) {\n        if (component[index] === '\"') {\n          if (typeof quotedComponents[quotedComponentIndex] !== \"object\")\n            quotedComponents[quotedComponentIndex] = {\n              start: index,\n            };\n          else if (typeof quotedComponents[quotedComponentIndex] === \"object\") {\n            quotedComponents[quotedComponentIndex][\"stop\"] = index;\n            quotedComponentIndex++;\n          }\n        }\n      }\n\n      const holdParsedComponent = [];\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < component.length; index2++) {\n        if (component[index2] === \",\") {\n          if (\n            quotedComponents.some((quotedComponent) => {\n              return (\n                index2 > quotedComponent.start && index2 < quotedComponent.stop\n              );\n            })\n          )\n            continue;\n\n          const backslashCount = this.#backCount(\n            \"\\\\\",\n            component.substring(continueFrom, index2)\n          );\n          if (backslashCount % 2 !== 0) continue;\n\n          holdParsedComponent.push(component.substring(continueFrom, index2));\n          continueFrom = index2 + 1;\n        }\n\n        if (index2 === component.length - 1)\n          holdParsedComponent.push(component.substring(continueFrom));\n      }\n\n      if (holdParsedComponent.length > 1)\n        parsedValue[index] = holdParsedComponent;\n    }\n\n    parsedValue = parsedValue.map((val) => {\n      if (!Array.isArray(val))\n        return val\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\n\n      return val.map((innerVal) =>\n        innerVal\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\")\n      );\n    });\n\n    return parsedValue.length > 1 ? parsedValue : parsedValue[0];\n  }\n\n  #parametersSeparator(params) {\n    const paramList = [];\n\n    const quotedParams = [];\n    let quotedParamIndex = 0;\n    for (let index = 0; index < params.length; index++) {\n      if (params[index] === '\"') {\n        if (typeof quotedParams[quotedParamIndex] !== \"object\")\n          quotedParams[quotedParamIndex] = {\n            start: index,\n          };\n        else if (typeof quotedParams[quotedParamIndex] === \"object\") {\n          quotedParams[quotedParamIndex][\"stop\"] = index;\n          quotedParamIndex++;\n        }\n      }\n    }\n\n    let continueFrom = 0;\n    for (let index = 0; index < params.length; index++) {\n      if (params[index] === \";\") {\n        if (\n          quotedParams.some((quotedParam) => {\n            return index > quotedParam.start && index < quotedParam.stop;\n          })\n        )\n          continue;\n\n        const backslashCount = this.#backCount(\n          \"\\\\\",\n          params.substring(continueFrom, index)\n        );\n        if (backslashCount % 2 !== 0) continue;\n\n        paramList.push(params.substring(continueFrom, index));\n        continueFrom = index + 1;\n      }\n\n      if (index === params.length - 1)\n        paramList.push(params.substring(continueFrom));\n    }\n\n    const refParamList = [...paramList];\n    for (let index = 0; index < paramList.length; index++) {\n      const joinedParam = paramList[index];\n\n      const holdJoinedParam = [];\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < joinedParam.length; index2++) {\n        if (joinedParam[index2] === \"=\") {\n          const actualIndex = index\n            ? (() => {\n                let count = 0;\n\n                for (let index3 = 0; index3 < index; index3++) {\n                  count += refParamList[index3][\"length\"];\n                  count++; //for removed semicolon\n                }\n\n                count += index2;\n\n                return count;\n              })()\n            : index2;\n          if (\n            quotedParams.some((quotedParam) => {\n              return (\n                actualIndex > quotedParam.start &&\n                actualIndex < quotedParam.stop\n              );\n            })\n          )\n            continue;\n\n          const backslashCount = this.#backCount(\n            \"\\\\\",\n            joinedParam.substring(continueFrom, index2)\n          );\n          if (backslashCount % 2 !== 0) continue;\n\n          holdJoinedParam.push(joinedParam.substring(continueFrom, index2));\n          continueFrom = index2 + 1;\n        }\n\n        if (index2 === joinedParam.length - 1)\n          holdJoinedParam.push(joinedParam.substring(continueFrom));\n      }\n\n      const parsedParam = {};\n      for (let index = 0; index < holdJoinedParam.length; index++) {\n        if (index % 2 === 0)\n          parsedParam[holdJoinedParam[index]] = holdJoinedParam[index + 1];\n        else continue;\n      }\n\n      paramList[index] = parsedParam;\n    }\n\n    for (let index = 0; index < paramList.length; index++) {\n      const currentParam = paramList[index];\n      const currentParamKey = Object.keys(currentParam).pop();\n      const currentParamValue = Object.values(currentParam).pop();\n\n      let holdCurrentParamValue = \"\";\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < currentParamValue.length; index2++) {\n        if (currentParamValue[index2] === \"^\") {\n          const circumflexCount = this.#backCount(\n            \"^\",\n            currentParamValue.substring(continueFrom, index2)\n          );\n\n          if (circumflexCount % 2 !== 0) {\n            holdCurrentParamValue += currentParamValue[index2];\n          } else {\n            switch (true) {\n              case currentParamValue[index2 + 1] === \"n\":\n                holdCurrentParamValue += \"\\n\";\n                index2++;\n                break;\n              case currentParamValue[index2 + 1] === \"’\":\n                holdCurrentParamValue += '\"';\n                index2++;\n                break;\n              case currentParamValue[index2 + 1] === \"^\":\n                holdCurrentParamValue += \"^\";\n                index2++;\n                break;\n            }\n          }\n        } else {\n          holdCurrentParamValue += currentParamValue[index2];\n        }\n        continueFrom = index2 + 1;\n      }\n\n      if (\n        holdCurrentParamValue.startsWith('\"') &&\n        holdCurrentParamValue.endsWith('\"') &&\n        !this.#uriRegExp.test(holdCurrentParamValue.slice(1, -1))\n      )\n        holdCurrentParamValue = this.#valueSeparator(\n          holdCurrentParamValue.slice(1, -1)\n        );\n\n      if (Array.isArray(holdCurrentParamValue))\n        holdCurrentParamValue.map((val) =>\n          val\n            .replaceAll(\"\\\\n\", \"\\n\")\n            .replaceAll(\"\\\\;\", \";\")\n            .replaceAll(\"\\\\:\", \":\")\n            .replaceAll(\"\\\\,\", \",\")\n            .replaceAll(\"\\\\\\\\\", \"\\\\\")\n        );\n      else\n        holdCurrentParamValue\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\n\n      currentParam[currentParamKey] = holdCurrentParamValue;\n    }\n\n    return paramList.reduce((accumulatedParams, currentParam) => {\n      const key = Object.keys(currentParam)[0].toUpperCase();\n      const value = Object.values(currentParam)[0];\n      accumulatedParams[key] = value;\n      return accumulatedParams;\n    }, {});\n  }\n\n  #contentLineTokenizer(contentLine) {\n    const firstSemiColonIndex = contentLine.indexOf(\";\");\n    const firstColonIndex = contentLine.indexOf(\":\");\n\n    const propEndPoint =\n      firstSemiColonIndex !== -1\n        ? firstColonIndex < firstSemiColonIndex\n          ? firstColonIndex\n          : firstSemiColonIndex\n        : firstColonIndex;\n\n    let property = contentLine.slice(0, propEndPoint);\n    let group = null;\n\n    if (property.indexOf(\".\") !== -1) {\n      [group, property] = property.split(\".\");\n    }\n\n    if (firstSemiColonIndex === -1 || firstColonIndex < firstSemiColonIndex)\n      return {\n        group,\n        property: property.toUpperCase(),\n        parameters: {},\n        value: this.#valueSeparator(contentLine.slice(propEndPoint + 1)),\n      };\n\n    return {\n      group,\n      property: property.toUpperCase(),\n      parameters: this.#parametersSeparator(\n        contentLine.slice(firstSemiColonIndex + 1, firstColonIndex)\n      ),\n      value: this.#valueSeparator(contentLine.slice(firstColonIndex + 1)),\n    };\n  }\n\n  #initialValidation(vcard) {\n    if (typeof vcard === \"undefined\")\n      throw new MissingArgument(\"vCard to be tokenized must be supplied\");\n    else if (typeof vcard !== \"string\")\n      throw new TypeError(\"vCard to be tokenized must be of type string\");\n\n    if ((vcard.match(/\\r\\n/g) ?? []).length < 4)\n      throw new InvalidVcard(\n        \"vCard content lines must be delimited by CRLF (\\\\r\\\\n) sequence\"\n      );\n  }\n\n  get tokens() {\n    const tokens = [];\n\n    if (this.numberOfVcards === 1) {\n      for (const contentLine of this.#separateVcardContentLines())\n        tokens.push(this.#contentLineTokenizer(contentLine));\n    } else {\n      for (const vcard of this.#separateVcardContentLines()) {\n        const _cardTokens = [];\n\n        for (const contentLine of vcard)\n          _cardTokens.push(this.#contentLineTokenizer(contentLine));\n\n        tokens.push(_cardTokens);\n      }\n    }\n\n    return tokens;\n  }\n\n  constructor(vcard) {\n    this.#initialValidation(vcard);\n    this.#_unfoldedVcard = vcard.replace(/\\r\\n[\\t ]/g, \"\"); //unfold\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Tokenizer);\n"],"names":["_unfoldedVcard","WeakMap","_uriRegExp","_backCount","WeakSet","_separateVcardContentLines","_valueSeparator","_parametersSeparator","_contentLineTokenizer","_initialValidation","Tokenizer","vcard","_classCallCheck","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","RegExp","_classPrivateMethodGet","_initialValidation2","call","_classPrivateFieldSet","replace","Object","freeze","_createClass","key","get","_classPrivateFieldGet2","_classPrivateFieldGet","match","length","tokens","numberOfVcards","_iterator","_createForOfIteratorHelper","_separateVcardContentLines2","_step","s","n","done","contentLine","push","_contentLineTokenizer2","err","e","f","_iterator2","_step2","_cardTokens","_iterator3","_step3","_backCount2","chr","str","MissingArgument","InvalidArgument","count","index","split","filter","map","_valueSeparator2","_this","test","quotedValues","quotedValueIndex","_typeof","start","parsedValue","continueFrom","_loop","some","quotedValue","stop","backslashCount","substring","_ret","component","quotedComponents","quotedComponentIndex","holdParsedComponent","_loop2","index2","quotedComponent","_ret2","val","Array","isArray","replaceAll","innerVal","_parametersSeparator2","params","_this2","paramList","quotedParams","quotedParamIndex","_loop3","quotedParam","_ret3","refParamList","concat","_loop4","joinedParam","holdJoinedParam","_loop5","actualIndex","index3","_ret4","parsedParam","currentParam","currentParamKey","keys","pop","currentParamValue","values","holdCurrentParamValue","circumflexCount","startsWith","endsWith","slice","reduce","accumulatedParams","toUpperCase","firstSemiColonIndex","indexOf","firstColonIndex","propEndPoint","property","group","_property$split","_property$split2","_slicedToArray","parameters","_vcard$match","TypeError","InvalidVcard","_defineProperty"],"mappings":"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"}