{"version":3,"file":"Tokenizer.js","sources":["../../../src/parse/Tokenizer.js"],"sourcesContent":["import {\n  MissingArgument,\n  InvalidArgument,\n  InvalidVcard,\n} from \"../errors/index.js\";\n\nexport class Tokenizer {\n  static identifier = \"Tokenizer\";\n\n  #_unfoldedVcard;\n\n  //Credit for the following regex goes to Jonas Hermsmeier, who got it from Jeff Roberson and added capture groups\n  #uriRegExp = new RegExp(\n    \"([A-Za-z][A-Za-z0-9+\\\\-.]*):(?:(//)(?:((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?((?:\\\\[(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}|::(?:[0-9A-Fa-f]{1,4}:){5}|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::)(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|[Vv][0-9A-Fa-f]+\\\\.[A-Za-z0-9\\\\-._~!$&'()*+,;=:]+)\\\\]|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*))(?::([0-9]*))?((?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|/((?:(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)?)|((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+(?:/(?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)|)(?:\\\\?((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?(?:\\\\#((?:[A-Za-z0-9\\\\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})*))?\"\n  );\n\n  get numberOfVcards() {\n    return (this.#_unfoldedVcard.match(/BEGIN:VCARD\\r\\n/gi) ?? []).length || 1;\n  }\n\n  #backCount(chr, str) {\n    if (typeof chr === \"undefined\" || typeof str === \"undefined\")\n      throw new MissingArgument(\n        \"Character and string for this.#backCount must be supplied\"\n      );\n\n    if (typeof chr !== \"string\" || typeof str !== \"string\")\n      throw new InvalidArgument(\n        \"Character and string for this.#backCount must be of type string\"\n      );\n\n    let count = 0;\n\n    for (let index = str.length - 1; index >= 0; index--) {\n      if (str[index] === chr) count++;\n      else break;\n    }\n\n    return count;\n  }\n\n  #separateVcardContentLines() {\n    if (this.numberOfVcards === 1)\n      return this.#_unfoldedVcard.split(\"\\r\\n\").filter((vcard) => vcard !== \"\");\n\n    return this.#_unfoldedVcard\n      .split(/BEGIN:VCARD\\r\\n/gi)\n      .filter((vcard) => vcard !== \"\")\n      .map((vcard) =>\n        (\"BEGIN:VCARD\\r\\n\" + vcard)\n          .split(\"\\r\\n\")\n          .filter((vcard) => vcard !== \"\")\n      );\n  }\n\n  #valueSeparator(value) {\n    if (this.#uriRegExp.test(value)) return value;\n\n    const quotedValues = [];\n    let quotedValueIndex = 0;\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === '\"') {\n        if (typeof quotedValues[quotedValueIndex] !== \"object\")\n          quotedValues[quotedValueIndex] = {\n            start: index,\n          };\n        else if (typeof quotedValues[quotedValueIndex] === \"object\") {\n          quotedValues[quotedValueIndex][\"stop\"] = index;\n          quotedValueIndex++;\n        }\n      }\n    }\n\n    let parsedValue = [];\n\n    let continueFrom = 0;\n    for (let index = 0; index < value.length; index++) {\n      if (value[index] === \";\") {\n        if (\n          quotedValues.some((quotedValue) => {\n            return index > quotedValue.start && index < quotedValue.stop;\n          })\n        )\n          continue;\n\n        const backslashCount = this.#backCount(\n          \"\\\\\",\n          value.substring(continueFrom, index)\n        );\n        if (backslashCount % 2 !== 0) continue;\n\n        parsedValue.push(value.substring(continueFrom, index));\n        continueFrom = index + 1;\n      }\n\n      if (index === value.length - 1)\n        parsedValue.push(value.substring(continueFrom));\n    }\n\n    for (let index = 0; index < parsedValue.length; index++) {\n      const component = parsedValue[index];\n\n      const quotedComponents = [];\n      let quotedComponentIndex = 0;\n      for (let index = 0; index < component.length; index++) {\n        if (component[index] === '\"') {\n          if (typeof quotedComponents[quotedComponentIndex] !== \"object\")\n            quotedComponents[quotedComponentIndex] = {\n              start: index,\n            };\n          else if (typeof quotedComponents[quotedComponentIndex] === \"object\") {\n            quotedComponents[quotedComponentIndex][\"stop\"] = index;\n            quotedComponentIndex++;\n          }\n        }\n      }\n\n      const holdParsedComponent = [];\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < component.length; index2++) {\n        if (component[index2] === \",\") {\n          if (\n            quotedComponents.some((quotedComponent) => {\n              return (\n                index2 > quotedComponent.start && index2 < quotedComponent.stop\n              );\n            })\n          )\n            continue;\n\n          const backslashCount = this.#backCount(\n            \"\\\\\",\n            component.substring(continueFrom, index2)\n          );\n          if (backslashCount % 2 !== 0) continue;\n\n          holdParsedComponent.push(component.substring(continueFrom, index2));\n          continueFrom = index2 + 1;\n        }\n\n        if (index2 === component.length - 1)\n          holdParsedComponent.push(component.substring(continueFrom));\n      }\n\n      if (holdParsedComponent.length > 1)\n        parsedValue[index] = holdParsedComponent;\n    }\n\n    parsedValue = parsedValue.map((val) => {\n      if (!Array.isArray(val))\n        return val\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\n\n      return val.map((innerVal) =>\n        innerVal\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\")\n      );\n    });\n\n    return parsedValue.length > 1 ? parsedValue : parsedValue[0];\n  }\n\n  #parametersSeparator(params) {\n    const paramList = [];\n\n    const quotedParams = [];\n    let quotedParamIndex = 0;\n    for (let index = 0; index < params.length; index++) {\n      if (params[index] === '\"') {\n        if (typeof quotedParams[quotedParamIndex] !== \"object\")\n          quotedParams[quotedParamIndex] = {\n            start: index,\n          };\n        else if (typeof quotedParams[quotedParamIndex] === \"object\") {\n          quotedParams[quotedParamIndex][\"stop\"] = index;\n          quotedParamIndex++;\n        }\n      }\n    }\n\n    let continueFrom = 0;\n    for (let index = 0; index < params.length; index++) {\n      if (params[index] === \";\") {\n        if (\n          quotedParams.some((quotedParam) => {\n            return index > quotedParam.start && index < quotedParam.stop;\n          })\n        )\n          continue;\n\n        const backslashCount = this.#backCount(\n          \"\\\\\",\n          params.substring(continueFrom, index)\n        );\n        if (backslashCount % 2 !== 0) continue;\n\n        paramList.push(params.substring(continueFrom, index));\n        continueFrom = index + 1;\n      }\n\n      if (index === params.length - 1)\n        paramList.push(params.substring(continueFrom));\n    }\n\n    const refParamList = [...paramList];\n    for (let index = 0; index < paramList.length; index++) {\n      const joinedParam = paramList[index];\n\n      const holdJoinedParam = [];\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < joinedParam.length; index2++) {\n        if (joinedParam[index2] === \"=\") {\n          const actualIndex = index\n            ? (() => {\n                let count = 0;\n\n                for (let index3 = 0; index3 < index; index3++) {\n                  count += refParamList[index3][\"length\"];\n                  count++; //for removed semicolon\n                }\n\n                count += index2;\n\n                return count;\n              })()\n            : index2;\n          if (\n            quotedParams.some((quotedParam) => {\n              return (\n                actualIndex > quotedParam.start &&\n                actualIndex < quotedParam.stop\n              );\n            })\n          )\n            continue;\n\n          const backslashCount = this.#backCount(\n            \"\\\\\",\n            joinedParam.substring(continueFrom, index2)\n          );\n          if (backslashCount % 2 !== 0) continue;\n\n          holdJoinedParam.push(joinedParam.substring(continueFrom, index2));\n          continueFrom = index2 + 1;\n        }\n\n        if (index2 === joinedParam.length - 1)\n          holdJoinedParam.push(joinedParam.substring(continueFrom));\n      }\n\n      const parsedParam = {};\n      for (let index = 0; index < holdJoinedParam.length; index++) {\n        if (index % 2 === 0)\n          parsedParam[holdJoinedParam[index]] = holdJoinedParam[index + 1];\n        else continue;\n      }\n\n      paramList[index] = parsedParam;\n    }\n\n    for (let index = 0; index < paramList.length; index++) {\n      const currentParam = paramList[index];\n      const currentParamKey = Object.keys(currentParam).pop();\n      const currentParamValue = Object.values(currentParam).pop();\n\n      let holdCurrentParamValue = \"\";\n      let continueFrom = 0;\n      for (let index2 = 0; index2 < currentParamValue.length; index2++) {\n        if (currentParamValue[index2] === \"^\") {\n          const circumflexCount = this.#backCount(\n            \"^\",\n            currentParamValue.substring(continueFrom, index2)\n          );\n\n          if (circumflexCount % 2 !== 0) {\n            holdCurrentParamValue += currentParamValue[index2];\n          } else {\n            switch (true) {\n              case currentParamValue[index2 + 1] === \"n\":\n                holdCurrentParamValue += \"\\n\";\n                index2++;\n                break;\n              case currentParamValue[index2 + 1] === \"’\":\n                holdCurrentParamValue += '\"';\n                index2++;\n                break;\n              case currentParamValue[index2 + 1] === \"^\":\n                holdCurrentParamValue += \"^\";\n                index2++;\n                break;\n            }\n          }\n        } else {\n          holdCurrentParamValue += currentParamValue[index2];\n        }\n        continueFrom = index2 + 1;\n      }\n\n      if (\n        holdCurrentParamValue.startsWith('\"') &&\n        holdCurrentParamValue.endsWith('\"') &&\n        !this.#uriRegExp.test(holdCurrentParamValue.slice(1, -1))\n      )\n        holdCurrentParamValue = this.#valueSeparator(\n          holdCurrentParamValue.slice(1, -1)\n        );\n\n      if (Array.isArray(holdCurrentParamValue))\n        holdCurrentParamValue.map((val) =>\n          val\n            .replaceAll(\"\\\\n\", \"\\n\")\n            .replaceAll(\"\\\\;\", \";\")\n            .replaceAll(\"\\\\:\", \":\")\n            .replaceAll(\"\\\\,\", \",\")\n            .replaceAll(\"\\\\\\\\\", \"\\\\\")\n        );\n      else\n        holdCurrentParamValue\n          .replaceAll(\"\\\\n\", \"\\n\")\n          .replaceAll(\"\\\\;\", \";\")\n          .replaceAll(\"\\\\:\", \":\")\n          .replaceAll(\"\\\\,\", \",\")\n          .replaceAll(\"\\\\\\\\\", \"\\\\\");\n\n      currentParam[currentParamKey] = holdCurrentParamValue;\n    }\n\n    return paramList.reduce((accumulatedParams, currentParam) => {\n      const key = Object.keys(currentParam)[0].toUpperCase();\n      const value = Object.values(currentParam)[0];\n      accumulatedParams[key] = value;\n      return accumulatedParams;\n    }, {});\n  }\n\n  #contentLineTokenizer(contentLine) {\n    const firstSemiColonIndex = contentLine.indexOf(\";\");\n    const firstColonIndex = contentLine.indexOf(\":\");\n\n    const propEndPoint =\n      firstSemiColonIndex !== -1\n        ? firstColonIndex < firstSemiColonIndex\n          ? firstColonIndex\n          : firstSemiColonIndex\n        : firstColonIndex;\n\n    let property = contentLine.slice(0, propEndPoint);\n    let group = null;\n\n    if (property.indexOf(\".\") !== -1) {\n      [group, property] = property.split(\".\");\n    }\n\n    if (firstSemiColonIndex === -1 || firstColonIndex < firstSemiColonIndex)\n      return {\n        group,\n        property: property.toUpperCase(),\n        parameters: {},\n        value: this.#valueSeparator(contentLine.slice(propEndPoint + 1)),\n      };\n\n    return {\n      group,\n      property: property.toUpperCase(),\n      parameters: this.#parametersSeparator(\n        contentLine.slice(firstSemiColonIndex + 1, firstColonIndex)\n      ),\n      value: this.#valueSeparator(contentLine.slice(firstColonIndex + 1)),\n    };\n  }\n\n  #initialValidation(vcard) {\n    if (typeof vcard === \"undefined\")\n      throw new MissingArgument(\"vCard to be tokenized must be supplied\");\n    else if (typeof vcard !== \"string\")\n      throw new TypeError(\"vCard to be tokenized must be of type string\");\n\n    if ((vcard.match(/\\r\\n/g) ?? []).length < 4)\n      throw new InvalidVcard(\n        \"vCard content lines must be delimited by CRLF (\\\\r\\\\n) sequence\"\n      );\n  }\n\n  get tokens() {\n    const tokens = [];\n\n    if (this.numberOfVcards === 1) {\n      for (const contentLine of this.#separateVcardContentLines())\n        tokens.push(this.#contentLineTokenizer(contentLine));\n    } else {\n      for (const vcard of this.#separateVcardContentLines()) {\n        const _cardTokens = [];\n\n        for (const contentLine of vcard)\n          _cardTokens.push(this.#contentLineTokenizer(contentLine));\n\n        tokens.push(_cardTokens);\n      }\n    }\n\n    return tokens;\n  }\n\n  constructor(vcard) {\n    this.#initialValidation(vcard);\n    this.#_unfoldedVcard = vcard.replace(/\\r\\n[\\t ]/g, \"\"); //unfold\n\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(Tokenizer);\n"],"names":["Tokenizer","vcard","RegExp","replace","Object","freeze","match","length","tokens","numberOfVcards","contentLine","push","_cardTokens","chr","str","MissingArgument","InvalidArgument","count","index","split","filter","map","value","test","quotedValues","quotedValueIndex","start","parsedValue","continueFrom","some","quotedValue","stop","backslashCount","substring","component","quotedComponents","quotedComponentIndex","holdParsedComponent","index2","quotedComponent","val","Array","isArray","replaceAll","innerVal","params","paramList","quotedParams","quotedParamIndex","quotedParam","refParamList","joinedParam","holdJoinedParam","actualIndex","index3","parsedParam","currentParam","currentParamKey","keys","pop","currentParamValue","values","holdCurrentParamValue","circumflexCount","startsWith","endsWith","slice","reduce","accumulatedParams","key","toUpperCase","firstSemiColonIndex","indexOf","firstColonIndex","propEndPoint","property","group","parameters","TypeError","InvalidVcard"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAMA,IAAaA,SAAb,gBAAA,YAAA;AAqZE,EAAA,SAAA,SAAA,CAAYC,MAAZ,EAAmB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,qBAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,oBAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,0BAAA,CAAA,CAAA;;AAAA,IAAA,2BAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,cAAA,EAAA;AAAA,MAAA,QAAA,EAAA,IAAA;AAAA,MAAA,KAAA,EAAA,KAAA,CAAA;AAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,UAAA,EAAA;AAAA,MAAA,QAAA,EAAA,IAAA;MAAA,KA/YN,EAAA,IAAIC,MAAJ,CACX,m0CADW,CAAA;AA+YM,KAAA,CAAA,CAAA;;AACjB,IAAA,sBAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,mBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAwBD,MAAxB,CAAA,CAAA;;IACA,qBAAuBA,CAAAA,IAAAA,EAAAA,cAAAA,EAAAA,MAAK,CAACE,OAAN,CAAc,YAAd,EAA4B,EAA5B,CAAvB,CAAA,CAFiB;;;IAIjBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAA,CAAA;AACD,GAAA;;AA1ZH,EAAA,YAAA,CAAA,SAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;IAAA,GAKE;IAKA,SAAqB,GAAA,GAAA;AAAA,MAAA,IAAA,sBAAA,CAAA;;MACnB,OAAO,CAAA,CAAA,sBAAA,GAAC,qBAAqBC,CAAAA,IAAAA,EAAAA,cAAAA,CAAAA,CAAAA,KAArB,CAA2B,mBAA3B,CAAD,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,sBAAA,GAAoD,EAApD,EAAwDC,MAAxD,IAAkE,CAAzE,CAAA;AACD,KAAA;AAZH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,GAAA,EAiYE,SAAa,GAAA,GAAA;MACX,IAAMC,MAAM,GAAG,EAAf,CAAA;;AAEA,MAAA,IAAI,IAAKC,CAAAA,cAAL,KAAwB,CAA5B,EAA+B;QAAA,IACH,SAAA,GAAA,0BAAA,CAAA,sBAAA,CAAA,IADG,gEACH,IADG,CAAA,CAAA;AAAA,YAAA,KAAA,CAAA;;AAAA,QAAA,IAAA;UAC7B,KACE,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,YAAA,IADSC,WACT,GAAA,KAAA,CAAA,KAAA,CAAA;AAAAF,YAAAA,MAAM,CAACG,IAAP,CAAA,sBAAA,CAAY,IAAZ,EAAY,qBAAA,EAAA,sBAAA,CAAA,CAAA,IAAA,CAAA,IAAZ,EAAuCD,WAAvC,CAAA,CAAA,CAAA;AAAqD,WAAA;AAF1B,SAAA,CAAA,OAAA,GAAA,EAAA;AAAA,UAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,UAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,SAAA;AAG9B,OAHD,MAGO;QAAA,IACe,UAAA,GAAA,0BAAA,CAAA,sBAAA,CAAA,IADf,gEACe,IADf,CAAA,CAAA;AAAA,YAAA,MAAA,CAAA;;AAAA,QAAA,IAAA;UACL,KAAuD,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,YAAA,IAA5CT,KAA4C,GAAA,MAAA,CAAA,KAAA,CAAA;YACrD,IAAMW,WAAW,GAAG,EAApB,CAAA;;AADqD,YAAA,IAAA,UAAA,GAAA,0BAAA,CAG3BX,KAH2B,CAAA;AAAA,gBAAA,MAAA,CAAA;;AAAA,YAAA,IAAA;cAGrD,KACE,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,gBAAA,IADSS,YACT,GAAA,MAAA,CAAA,KAAA,CAAA;;AAAAE,gBAAAA,WAAW,CAACD,IAAZ,CAAA,sBAAA,CAAiB,IAAjB,EAAiB,qBAAA,EAAA,sBAAA,CAAA,CAAA,IAAA,CAAA,IAAjB,EAA4CD,YAA5C,CAAA,CAAA,CAAA;AAA0D,eAAA;AAJP,aAAA,CAAA,OAAA,GAAA,EAAA;AAAA,cAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,aAAA,SAAA;AAAA,cAAA,UAAA,CAAA,CAAA,EAAA,CAAA;AAAA,aAAA;;YAMrDF,MAAM,CAACG,IAAP,CAAYC,WAAZ,CAAA,CAAA;AACD,WAAA;AARI,SAAA,CAAA,OAAA,GAAA,EAAA;AAAA,UAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,UAAA,UAAA,CAAA,CAAA,EAAA,CAAA;AAAA,SAAA;AASN,OAAA;;AAED,MAAA,OAAOJ,MAAP,CAAA;AACD,KAAA;AAnZH,GAAA,CAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,SAAA,CAAA;AAAA,CAAA,GAAA;;qBAcaK,KAAKC,KAAK;AACnB,EAAA,IAAI,OAAOD,GAAP,KAAe,WAAf,IAA8B,OAAOC,GAAP,KAAe,WAAjD,EACE,MAAM,IAAIC,eAAJ,CACJ,2DADI,CAAN,CAAA;AAIF,EAAA,IAAI,OAAOF,GAAP,KAAe,QAAf,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EACE,MAAM,IAAIE,eAAJ,CACJ,iEADI,CAAN,CAAA;EAIF,IAAIC,KAAK,GAAG,CAAZ,CAAA;;AAEA,EAAA,KAAK,IAAIC,KAAK,GAAGJ,GAAG,CAACP,MAAJ,GAAa,CAA9B,EAAiCW,KAAK,IAAI,CAA1C,EAA6CA,KAAK,EAAlD,EAAsD;IACpD,IAAIJ,GAAG,CAACI,KAAD,CAAH,KAAeL,GAAnB,EAAwBI,KAAK,EAAA,CAA7B,KACK,MAAA;AACN,GAAA;;AAED,EAAA,OAAOA,KAAP,CAAA;AACD,CAAA;;AAE4B,SAAA,2BAAA,GAAA;AAC3B,EAAA,IAAI,IAAKR,CAAAA,cAAL,KAAwB,CAA5B,EACE,OAAO,qBAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAqBU,KAArB,CAA2B,MAA3B,CAAA,CAAmCC,MAAnC,CAA0C,UAACnB,KAAD,EAAA;IAAA,OAAWA,KAAK,KAAK,EAArB,CAAA;AAAA,GAA1C,CAAP,CAAA;EAEF,OAAO,qBAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CACJkB,KADI,CACE,mBADF,EAEJC,MAFI,CAEG,UAACnB,KAAD,EAAA;IAAA,OAAWA,KAAK,KAAK,EAArB,CAAA;AAAA,GAFH,CAGJoB,CAAAA,GAHI,CAGA,UAACpB,KAAD,EAAA;IAAA,OACH,CAAC,iBAAoBA,GAAAA,KAArB,EACGkB,KADH,CACS,MADT,CAEGC,CAAAA,MAFH,CAEU,UAACnB,KAAD,EAAA;MAAA,OAAWA,KAAK,KAAK,EAArB,CAAA;AAAA,KAFV,CADG,CAAA;AAAA,GAHA,CAAP,CAAA;AAQD,CAAA;;AAEeqB,SAAAA,gBAAAA,CAAAA,OAAO;AAAA,EAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;AACrB,EAAA,IAAI,wCAAgBC,IAAhB,CAAqBD,KAArB,CAAJ,EAAiC,OAAOA,KAAP,CAAA;EAEjC,IAAME,YAAY,GAAG,EAArB,CAAA;EACA,IAAIC,gBAAgB,GAAG,CAAvB,CAAA;;AACA,EAAA,KAAK,IAAIP,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGI,KAAK,CAACf,MAAlC,EAA0CW,KAAK,EAA/C,EAAmD;AACjD,IAAA,IAAII,KAAK,CAACJ,KAAD,CAAL,KAAiB,GAArB,EAA0B;AACxB,MAAA,IAAI,OAAOM,CAAAA,YAAY,CAACC,gBAAD,CAAnB,CAAA,KAA0C,QAA9C,EACED,YAAY,CAACC,gBAAD,CAAZ,GAAiC;AAC/BC,QAAAA,KAAK,EAAER,KAAAA;OADT,CADF,KAIK,IAAI,OAAOM,CAAAA,YAAY,CAACC,gBAAD,CAAnB,CAA0C,KAAA,QAA9C,EAAwD;AAC3DD,QAAAA,YAAY,CAACC,gBAAD,CAAZ,CAA+B,MAA/B,IAAyCP,KAAzC,CAAA;QACAO,gBAAgB,EAAA,CAAA;AACjB,OAAA;AACF,KAAA;AACF,GAAA;;EAED,IAAIE,WAAW,GAAG,EAAlB,CAAA;EAEA,IAAIC,YAAY,GAAG,CAAnB,CAAA;;AApBqB,EAAA,IAAA,KAAA,GAAA,SAAA,KAAA,CAqBZV,MArBY,EAAA;AAsBnB,IAAA,IAAII,KAAK,CAACJ,MAAD,CAAL,KAAiB,GAArB,EAA0B;AACxB,MAAA,IACEM,YAAY,CAACK,IAAb,CAAkB,UAACC,WAAD,EAAiB;QACjC,OAAOZ,MAAK,GAAGY,WAAW,CAACJ,KAApB,IAA6BR,MAAK,GAAGY,WAAW,CAACC,IAAxD,CAAA;AACD,OAFD,CADF,EAKE,OAAA,UAAA,CAAA;;AAEF,MAAA,IAAMC,cAAc,GAAG,sBAAA,CAAA,KAAH,EAAG,UAAA,EAAA,WAAA,CAAA,CAAA,IAAA,CAAA,KAAH,EAClB,IADkB,EAElBV,KAAK,CAACW,SAAN,CAAgBL,YAAhB,EAA8BV,MAA9B,CAFkB,CAApB,CAAA;;AAIA,MAAA,IAAIc,cAAc,GAAG,CAAjB,KAAuB,CAA3B,EAA8B,OAAA,UAAA,CAAA;MAE9BL,WAAW,CAAChB,IAAZ,CAAiBW,KAAK,CAACW,SAAN,CAAgBL,YAAhB,EAA8BV,MAA9B,CAAjB,CAAA,CAAA;MACAU,YAAY,GAAGV,MAAK,GAAG,CAAvB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIA,MAAK,KAAKI,KAAK,CAACf,MAAN,GAAe,CAA7B,EACEoB,WAAW,CAAChB,IAAZ,CAAiBW,KAAK,CAACW,SAAN,CAAgBL,YAAhB,CAAjB,CAAA,CAAA;AAzCiB,GAAA,CAAA;;AAqBrB,EAAA,KAAK,IAAIV,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAGI,KAAK,CAACf,MAAlC,EAA0CW,MAAK,EAA/C,EAAmD;AAAA,IAAA,IAAA,IAAA,GAAA,KAAA,CAA1CA,MAA0C,CAAA,CAAA;;IAAA,IAajB,IAAA,KAAA,UAAA,EAAA,SAAA;AAQjC,GAAA;;AAED,EAAA,KAAK,IAAIA,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAGS,WAAW,CAACpB,MAAxC,EAAgDW,OAAK,EAArD,EAAyD;AACvD,IAAA,IAAMgB,SAAS,GAAGP,WAAW,CAACT,OAAD,CAA7B,CAAA;IAEA,IAAMiB,gBAAgB,GAAG,EAAzB,CAAA;IACA,IAAIC,oBAAoB,GAAG,CAA3B,CAAA;;AACA,IAAA,KAAK,IAAIlB,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAGgB,SAAS,CAAC3B,MAAtC,EAA8CW,OAAK,EAAnD,EAAuD;AACrD,MAAA,IAAIgB,SAAS,CAAChB,OAAD,CAAT,KAAqB,GAAzB,EAA8B;AAC5B,QAAA,IAAI,OAAOiB,CAAAA,gBAAgB,CAACC,oBAAD,CAAvB,CAAA,KAAkD,QAAtD,EACED,gBAAgB,CAACC,oBAAD,CAAhB,GAAyC;AACvCV,UAAAA,KAAK,EAAER,OAAAA;SADT,CADF,KAIK,IAAI,OAAOiB,CAAAA,gBAAgB,CAACC,oBAAD,CAAvB,CAAkD,KAAA,QAAtD,EAAgE;AACnED,UAAAA,gBAAgB,CAACC,oBAAD,CAAhB,CAAuC,MAAvC,IAAiDlB,OAAjD,CAAA;UACAkB,oBAAoB,EAAA,CAAA;AACrB,SAAA;AACF,OAAA;AACF,KAAA;;IAED,IAAMC,mBAAmB,GAAG,EAA5B,CAAA;IACA,IAAIT,aAAY,GAAG,CAAnB,CAAA;;AAnBuD,IAAA,IAAA,MAAA,GAAA,SAAA,MAAA,CAoB9CU,MApB8C,EAAA;AAqBrD,MAAA,IAAIJ,SAAS,CAACI,MAAD,CAAT,KAAsB,GAA1B,EAA+B;AAC7B,QAAA,IACEH,gBAAgB,CAACN,IAAjB,CAAsB,UAACU,eAAD,EAAqB;UACzC,OACED,MAAM,GAAGC,eAAe,CAACb,KAAzB,IAAkCY,MAAM,GAAGC,eAAe,CAACR,IAD7D,CAAA;AAGD,SAJD,CADF,EAOE,OAAA,UAAA,CAAA;;AAEF,QAAA,IAAMC,cAAc,GAAG,sBAAA,CAAA,KAAH,EAAG,UAAA,EAAA,WAAA,CAAA,CAAA,IAAA,CAAA,KAAH,EAClB,IADkB,EAElBE,SAAS,CAACD,SAAV,CAAoBL,aAApB,EAAkCU,MAAlC,CAFkB,CAApB,CAAA;;AAIA,QAAA,IAAIN,cAAc,GAAG,CAAjB,KAAuB,CAA3B,EAA8B,OAAA,UAAA,CAAA;QAE9BK,mBAAmB,CAAC1B,IAApB,CAAyBuB,SAAS,CAACD,SAAV,CAAoBL,aAApB,EAAkCU,MAAlC,CAAzB,CAAA,CAAA;QACAV,aAAY,GAAGU,MAAM,GAAG,CAAxB,CAAA;AACD,OAAA;;AAED,MAAA,IAAIA,MAAM,KAAKJ,SAAS,CAAC3B,MAAV,GAAmB,CAAlC,EACE8B,mBAAmB,CAAC1B,IAApB,CAAyBuB,SAAS,CAACD,SAAV,CAAoBL,aAApB,CAAzB,CAAA,CAAA;AA1CmD,KAAA,CAAA;;AAoBvD,IAAA,KAAK,IAAIU,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGJ,SAAS,CAAC3B,MAAxC,EAAgD+B,MAAM,EAAtD,EAA0D;AAAA,MAAA,IAAA,KAAA,GAAA,MAAA,CAAjDA,MAAiD,CAAA,CAAA;;MAAA,IAexB,KAAA,KAAA,UAAA,EAAA,SAAA;AAQjC,KAAA;;IAED,IAAID,mBAAmB,CAAC9B,MAApB,GAA6B,CAAjC,EACEoB,WAAW,CAACT,OAAD,CAAX,GAAqBmB,mBAArB,CAAA;AACH,GAAA;;AAEDV,EAAAA,WAAW,GAAGA,WAAW,CAACN,GAAZ,CAAgB,UAACmB,GAAD,EAAS;AACrC,IAAA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAL,EACE,OAAOA,GAAG,CACPG,UADI,CACO,KADP,EACc,IADd,CAAA,CAEJA,UAFI,CAEO,KAFP,EAEc,GAFd,EAGJA,UAHI,CAGO,KAHP,EAGc,GAHd,EAIJA,UAJI,CAIO,KAJP,EAIc,GAJd,CAKJA,CAAAA,UALI,CAKO,MALP,EAKe,IALf,CAAP,CAAA;AAOF,IAAA,OAAOH,GAAG,CAACnB,GAAJ,CAAQ,UAACuB,QAAD,EAAA;AAAA,MAAA,OACbA,QAAQ,CACLD,UADH,CACc,KADd,EACqB,IADrB,CAAA,CAEGA,UAFH,CAEc,KAFd,EAEqB,GAFrB,CAGGA,CAAAA,UAHH,CAGc,KAHd,EAGqB,GAHrB,CAIGA,CAAAA,UAJH,CAIc,KAJd,EAIqB,GAJrB,CAAA,CAKGA,UALH,CAKc,MALd,EAKsB,IALtB,CADa,CAAA;AAAA,KAAR,CAAP,CAAA;AAQD,GAjBa,CAAd,CAAA;EAmBA,OAAOhB,WAAW,CAACpB,MAAZ,GAAqB,CAArB,GAAyBoB,WAAzB,GAAuCA,WAAW,CAAC,CAAD,CAAzD,CAAA;AACD,CAAA;;AAEoBkB,SAAAA,qBAAAA,CAAAA,QAAQ;AAAA,EAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;EAC3B,IAAMC,SAAS,GAAG,EAAlB,CAAA;EAEA,IAAMC,YAAY,GAAG,EAArB,CAAA;EACA,IAAIC,gBAAgB,GAAG,CAAvB,CAAA;;AACA,EAAA,KAAK,IAAI9B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG2B,MAAM,CAACtC,MAAnC,EAA2CW,KAAK,EAAhD,EAAoD;AAClD,IAAA,IAAI2B,MAAM,CAAC3B,KAAD,CAAN,KAAkB,GAAtB,EAA2B;AACzB,MAAA,IAAI,OAAO6B,CAAAA,YAAY,CAACC,gBAAD,CAAnB,CAAA,KAA0C,QAA9C,EACED,YAAY,CAACC,gBAAD,CAAZ,GAAiC;AAC/BtB,QAAAA,KAAK,EAAER,KAAAA;OADT,CADF,KAIK,IAAI,OAAO6B,CAAAA,YAAY,CAACC,gBAAD,CAAnB,CAA0C,KAAA,QAA9C,EAAwD;AAC3DD,QAAAA,YAAY,CAACC,gBAAD,CAAZ,CAA+B,MAA/B,IAAyC9B,KAAzC,CAAA;QACA8B,gBAAgB,EAAA,CAAA;AACjB,OAAA;AACF,KAAA;AACF,GAAA;;EAED,IAAIpB,YAAY,GAAG,CAAnB,CAAA;;AAlB2B,EAAA,IAAA,MAAA,GAAA,SAAA,MAAA,CAmBlBV,OAnBkB,EAAA;AAoBzB,IAAA,IAAI2B,MAAM,CAAC3B,OAAD,CAAN,KAAkB,GAAtB,EAA2B;AACzB,MAAA,IACE6B,YAAY,CAAClB,IAAb,CAAkB,UAACoB,WAAD,EAAiB;QACjC,OAAO/B,OAAK,GAAG+B,WAAW,CAACvB,KAApB,IAA6BR,OAAK,GAAG+B,WAAW,CAAClB,IAAxD,CAAA;AACD,OAFD,CADF,EAKE,OAAA,UAAA,CAAA;;AAEF,MAAA,IAAMC,cAAc,GAAG,sBAAA,CAAA,MAAH,EAAG,UAAA,EAAA,WAAA,CAAA,CAAA,IAAA,CAAA,MAAH,EAClB,IADkB,EAElBa,MAAM,CAACZ,SAAP,CAAiBL,YAAjB,EAA+BV,OAA/B,CAFkB,CAApB,CAAA;;AAIA,MAAA,IAAIc,cAAc,GAAG,CAAjB,KAAuB,CAA3B,EAA8B,OAAA,UAAA,CAAA;MAE9Bc,SAAS,CAACnC,IAAV,CAAekC,MAAM,CAACZ,SAAP,CAAiBL,YAAjB,EAA+BV,OAA/B,CAAf,CAAA,CAAA;MACAU,YAAY,GAAGV,OAAK,GAAG,CAAvB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIA,OAAK,KAAK2B,MAAM,CAACtC,MAAP,GAAgB,CAA9B,EACEuC,SAAS,CAACnC,IAAV,CAAekC,MAAM,CAACZ,SAAP,CAAiBL,YAAjB,CAAf,CAAA,CAAA;AAvCuB,GAAA,CAAA;;AAmB3B,EAAA,KAAK,IAAIV,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAG2B,MAAM,CAACtC,MAAnC,EAA2CW,OAAK,EAAhD,EAAoD;AAAA,IAAA,IAAA,KAAA,GAAA,MAAA,CAA3CA,OAA2C,CAAA,CAAA;;IAAA,IAalB,KAAA,KAAA,UAAA,EAAA,SAAA;AAQjC,GAAA;;EAED,IAAMgC,YAAY,GAAOJ,EAAAA,CAAAA,MAAAA,CAAAA,SAAP,CAAlB,CAAA;;AA1C2B,EAAA,IAAA,MAAA,GAAA,SAAA,MAAA,CA2ClB5B,OA3CkB,EAAA;AA4CzB,IAAA,IAAMiC,WAAW,GAAGL,SAAS,CAAC5B,OAAD,CAA7B,CAAA;IAEA,IAAMkC,eAAe,GAAG,EAAxB,CAAA;IACA,IAAIxB,YAAY,GAAG,CAAnB,CAAA;;AA/CyB,IAAA,IAAA,MAAA,GAAA,SAAA,MAAA,CAgDhBU,OAhDgB,EAAA;AAiDvB,MAAA,IAAIa,WAAW,CAACb,OAAD,CAAX,KAAwB,GAA5B,EAAiC;AAC/B,QAAA,IAAMe,WAAW,GAAGnC,OAAK,GACpB,YAAM;UACL,IAAID,KAAK,GAAG,CAAZ,CAAA;;UAEA,KAAK,IAAIqC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGpC,OAA9B,EAAqCoC,MAAM,EAA3C,EAA+C;AAC7CrC,YAAAA,KAAK,IAAIiC,YAAY,CAACI,MAAD,CAAZ,CAAqB,QAArB,CAAT,CAAA;AACArC,YAAAA,KAAK,GAFwC;AAG9C,WAAA;;AAEDA,UAAAA,KAAK,IAAIqB,OAAT,CAAA;AAEA,UAAA,OAAOrB,KAAP,CAAA;SAVF,EADqB,GAarBqB,OAbJ,CAAA;AAcA,QAAA,IACES,YAAY,CAAClB,IAAb,CAAkB,UAACoB,WAAD,EAAiB;UACjC,OACEI,WAAW,GAAGJ,WAAW,CAACvB,KAA1B,IACA2B,WAAW,GAAGJ,WAAW,CAAClB,IAF5B,CAAA;AAID,SALD,CADF,EAQE,OAAA,UAAA,CAAA;;AAEF,QAAA,IAAMC,cAAc,GAAG,sBAAA,CAAA,MAAH,EAAG,UAAA,EAAA,WAAA,CAAA,CAAA,IAAA,CAAA,MAAH,EAClB,IADkB,EAElBmB,WAAW,CAAClB,SAAZ,CAAsBL,YAAtB,EAAoCU,OAApC,CAFkB,CAApB,CAAA;;AAIA,QAAA,IAAIN,cAAc,GAAG,CAAjB,KAAuB,CAA3B,EAA8B,OAAA,UAAA,CAAA;QAE9BoB,eAAe,CAACzC,IAAhB,CAAqBwC,WAAW,CAAClB,SAAZ,CAAsBL,YAAtB,EAAoCU,OAApC,CAArB,CAAA,CAAA;QACAV,YAAY,GAAGU,OAAM,GAAG,CAAxB,CAAA;AACD,OAAA;;AAED,MAAA,IAAIA,OAAM,KAAKa,WAAW,CAAC5C,MAAZ,GAAqB,CAApC,EACE6C,eAAe,CAACzC,IAAhB,CAAqBwC,WAAW,CAAClB,SAAZ,CAAsBL,YAAtB,CAArB,CAAA,CAAA;AArFqB,KAAA,CAAA;;AAgDzB,IAAA,KAAK,IAAIU,OAAM,GAAG,CAAlB,EAAqBA,OAAM,GAAGa,WAAW,CAAC5C,MAA1C,EAAkD+B,OAAM,EAAxD,EAA4D;AAAA,MAAA,IAAA,KAAA,GAAA,MAAA,CAAnDA,OAAmD,CAAA,CAAA;;MAAA,IA8B1B,KAAA,KAAA,UAAA,EAAA,SAAA;AAQjC,KAAA;;IAED,IAAMiB,WAAW,GAAG,EAApB,CAAA;;AACA,IAAA,KAAK,IAAIrC,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAGkC,eAAe,CAAC7C,MAA5C,EAAoDW,OAAK,EAAzD,EAA6D;MAC3D,IAAIA,OAAK,GAAG,CAAR,KAAc,CAAlB,EACEqC,WAAW,CAACH,eAAe,CAAClC,OAAD,CAAhB,CAAX,GAAsCkC,eAAe,CAAClC,OAAK,GAAG,CAAT,CAArD,CADF,KAEK,SAAA;AACN,KAAA;;AAED4B,IAAAA,SAAS,CAAC5B,OAAD,CAAT,GAAmBqC,WAAnB,CAAA;AA/FyB,GAAA,CAAA;;AA2C3B,EAAA,KAAK,IAAIrC,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAG4B,SAAS,CAACvC,MAAtC,EAA8CW,OAAK,EAAnD,EAAuD;AAAA,IAAA,MAAA,CAA9CA,OAA8C,CAAA,CAAA;AAqDtD,GAAA;;AAED,EAAA,KAAK,IAAIA,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAG4B,SAAS,CAACvC,MAAtC,EAA8CW,OAAK,EAAnD,EAAuD;AACrD,IAAA,IAAMsC,YAAY,GAAGV,SAAS,CAAC5B,OAAD,CAA9B,CAAA;IACA,IAAMuC,eAAe,GAAGrD,MAAM,CAACsD,IAAP,CAAYF,YAAZ,CAA0BG,CAAAA,GAA1B,EAAxB,CAAA;IACA,IAAMC,iBAAiB,GAAGxD,MAAM,CAACyD,MAAP,CAAcL,YAAd,CAA4BG,CAAAA,GAA5B,EAA1B,CAAA;IAEA,IAAIG,qBAAqB,GAAG,EAA5B,CAAA;IACA,IAAIlC,cAAY,GAAG,CAAnB,CAAA;;AACA,IAAA,KAAK,IAAIU,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGsB,iBAAiB,CAACrD,MAAhD,EAAwD+B,MAAM,EAA9D,EAAkE;AAChE,MAAA,IAAIsB,iBAAiB,CAACtB,MAAD,CAAjB,KAA8B,GAAlC,EAAuC;AACrC,QAAA,IAAMyB,eAAe,GAAG,sBAAA,CAAA,IAAH,EAAG,UAAA,EAAA,WAAA,CAAA,CAAA,IAAA,CAAA,IAAH,EACnB,GADmB,EAEnBH,iBAAiB,CAAC3B,SAAlB,CAA4BL,cAA5B,EAA0CU,MAA1C,CAFmB,CAArB,CAAA;;AAKA,QAAA,IAAIyB,eAAe,GAAG,CAAlB,KAAwB,CAA5B,EAA+B;AAC7BD,UAAAA,qBAAqB,IAAIF,iBAAiB,CAACtB,MAAD,CAA1C,CAAA;AACD,SAFD,MAEO;AACL,UAAA,QAAQ,IAAR;AACE,YAAA,KAAKsB,iBAAiB,CAACtB,MAAM,GAAG,CAAV,CAAjB,KAAkC,GAAvC;AACEwB,cAAAA,qBAAqB,IAAI,IAAzB,CAAA;cACAxB,MAAM,EAAA,CAAA;AACN,cAAA,MAAA;;AACF,YAAA,KAAKsB,iBAAiB,CAACtB,MAAM,GAAG,CAAV,CAAjB,KAAkC,GAAvC;AACEwB,cAAAA,qBAAqB,IAAI,GAAzB,CAAA;cACAxB,MAAM,EAAA,CAAA;AACN,cAAA,MAAA;;AACF,YAAA,KAAKsB,iBAAiB,CAACtB,MAAM,GAAG,CAAV,CAAjB,KAAkC,GAAvC;AACEwB,cAAAA,qBAAqB,IAAI,GAAzB,CAAA;cACAxB,MAAM,EAAA,CAAA;AACN,cAAA,MAAA;AAZJ,WAAA;AAcD,SAAA;AACF,OAxBD,MAwBO;AACLwB,QAAAA,qBAAqB,IAAIF,iBAAiB,CAACtB,MAAD,CAA1C,CAAA;AACD,OAAA;;MACDV,cAAY,GAAGU,MAAM,GAAG,CAAxB,CAAA;AACD,KAAA;;AAED,IAAA,IACEwB,qBAAqB,CAACE,UAAtB,CAAiC,GAAjC,CAAA,IACAF,qBAAqB,CAACG,QAAtB,CAA+B,GAA/B,CADA,IAEA,CAAC,qBAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAgB1C,IAAhB,CAAqBuC,qBAAqB,CAACI,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAhC,CAArB,CAHH,EAKEJ,qBAAqB,GAAA,sBAAA,CAAG,IAAH,EAAG,eAAA,EAAA,gBAAA,CAAA,CAAA,IAAA,CAAA,IAAH,EACnBA,qBAAqB,CAACI,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAhC,CADmB,CAArB,CAAA;AAIF,IAAA,IAAIzB,KAAK,CAACC,OAAN,CAAcoB,qBAAd,CAAJ,EACEA,qBAAqB,CAACzC,GAAtB,CAA0B,UAACmB,GAAD,EAAA;AAAA,MAAA,OACxBA,GAAG,CACAG,UADH,CACc,KADd,EACqB,IADrB,CAAA,CAEGA,UAFH,CAEc,KAFd,EAEqB,GAFrB,CAGGA,CAAAA,UAHH,CAGc,KAHd,EAGqB,GAHrB,CAIGA,CAAAA,UAJH,CAIc,KAJd,EAIqB,GAJrB,CAAA,CAKGA,UALH,CAKc,MALd,EAKsB,IALtB,CADwB,CAAA;AAAA,KAA1B,CADF,CAAA,KAUEmB,qBAAqB,CAClBnB,UADH,CACc,KADd,EACqB,IADrB,CAEGA,CAAAA,UAFH,CAEc,KAFd,EAEqB,GAFrB,CAAA,CAGGA,UAHH,CAGc,KAHd,EAGqB,GAHrB,CAAA,CAIGA,UAJH,CAIc,KAJd,EAIqB,GAJrB,CAKGA,CAAAA,UALH,CAKc,MALd,EAKsB,IALtB,CAAA,CAAA;AAOFa,IAAAA,YAAY,CAACC,eAAD,CAAZ,GAAgCK,qBAAhC,CAAA;AACD,GAAA;;EAED,OAAOhB,SAAS,CAACqB,MAAV,CAAiB,UAACC,iBAAD,EAAoBZ,YAApB,EAAqC;IAC3D,IAAMa,GAAG,GAAGjE,MAAM,CAACsD,IAAP,CAAYF,YAAZ,CAA0B,CAAA,CAA1B,CAA6Bc,CAAAA,WAA7B,EAAZ,CAAA;IACA,IAAMhD,KAAK,GAAGlB,MAAM,CAACyD,MAAP,CAAcL,YAAd,CAA4B,CAAA,CAA5B,CAAd,CAAA;AACAY,IAAAA,iBAAiB,CAACC,GAAD,CAAjB,GAAyB/C,KAAzB,CAAA;AACA,IAAA,OAAO8C,iBAAP,CAAA;GAJK,EAKJ,EALI,CAAP,CAAA;AAMD,CAAA;;AAEqB1D,SAAAA,sBAAAA,CAAAA,aAAa;AACjC,EAAA,IAAM6D,mBAAmB,GAAG7D,WAAW,CAAC8D,OAAZ,CAAoB,GAApB,CAA5B,CAAA;AACA,EAAA,IAAMC,eAAe,GAAG/D,WAAW,CAAC8D,OAAZ,CAAoB,GAApB,CAAxB,CAAA;AAEA,EAAA,IAAME,YAAY,GAChBH,mBAAmB,KAAK,CAAC,CAAzB,GACIE,eAAe,GAAGF,mBAAlB,GACEE,eADF,GAEEF,mBAHN,GAIIE,eALN,CAAA;EAOA,IAAIE,QAAQ,GAAGjE,WAAW,CAACwD,KAAZ,CAAkB,CAAlB,EAAqBQ,YAArB,CAAf,CAAA;EACA,IAAIE,KAAK,GAAG,IAAZ,CAAA;;EAEA,IAAID,QAAQ,CAACH,OAAT,CAAiB,GAAjB,CAA0B,KAAA,CAAC,CAA/B,EAAkC;AAAA,IAAA,IAAA,eAAA,GACZG,QAAQ,CAACxD,KAAT,CAAe,GAAf,CADY,CAAA;;AAAA,IAAA,IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA,CAAA;;IAC/ByD,KAD+B,GAAA,gBAAA,CAAA,CAAA,CAAA,CAAA;IACxBD,QADwB,GAAA,gBAAA,CAAA,CAAA,CAAA,CAAA;AAEjC,GAAA;;EAED,IAAIJ,mBAAmB,KAAK,CAAC,CAAzB,IAA8BE,eAAe,GAAGF,mBAApD,EACE,OAAO;AACLK,IAAAA,KAAK,EAALA,KADK;AAELD,IAAAA,QAAQ,EAAEA,QAAQ,CAACL,WAAT,EAFL;AAGLO,IAAAA,UAAU,EAAE,EAHP;AAILvD,IAAAA,KAAK,EAAE,sBAAA,CAAA,IAAF,EAAE,eAAA,EAAA,gBAAA,CAAA,CAAA,IAAA,CAAA,IAAF,EAAuBZ,WAAW,CAACwD,KAAZ,CAAkBQ,YAAY,GAAG,CAAjC,CAAvB,CAAA;GAJP,CAAA;EAOF,OAAO;AACLE,IAAAA,KAAK,EAALA,KADK;AAELD,IAAAA,QAAQ,EAAEA,QAAQ,CAACL,WAAT,EAFL;AAGLO,IAAAA,UAAU,EAAE,sBAAA,CAAA,IAAF,EAAE,oBAAA,EAAA,qBAAA,CAAA,CAAA,IAAA,CAAA,IAAF,EACRnE,WAAW,CAACwD,KAAZ,CAAkBK,mBAAmB,GAAG,CAAxC,EAA2CE,eAA3C,CADQ,CAHL;AAMLnD,IAAAA,KAAK,EAAE,sBAAA,CAAA,IAAF,EAAE,eAAA,EAAA,gBAAA,CAAA,CAAA,IAAA,CAAA,IAAF,EAAuBZ,WAAW,CAACwD,KAAZ,CAAkBO,eAAe,GAAG,CAApC,CAAvB,CAAA;GANP,CAAA;AAQD,CAAA;;AAEkBxE,SAAAA,mBAAAA,CAAAA,OAAO;AAAA,EAAA,IAAA,YAAA,CAAA;;EACxB,IAAI,OAAOA,KAAP,KAAiB,WAArB,EACE,MAAM,IAAIc,eAAJ,CAAoB,wCAApB,CAAN,CADF,KAEK,IAAI,OAAOd,KAAP,KAAiB,QAArB,EACH,MAAM,IAAI6E,SAAJ,CAAc,8CAAd,CAAN,CAAA;AAEF,EAAA,IAAI,iBAAC7E,KAAK,CAACK,KAAN,CAAY,OAAZ,CAAD,MAAyB,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,YAAA,GAAA,EAAzB,EAA6BC,MAA7B,GAAsC,CAA1C,EACE,MAAM,IAAIwE,YAAJ,CACJ,iEADI,CAAN,CAAA;AAGH,CAAA;;AA/XU/E,eAAAA,CAAAA,yBACS;;AA4ZtBI,MAAM,CAACC,MAAP,CAAcL,SAAd,CAAA;;;;"}