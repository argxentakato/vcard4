{"version":3,"file":"MediatypeParameter.js","sources":["../../../src/parameters/MediatypeParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class MediatypeParameter extends BaseParameter {\n  static param = \"MEDIATYPE\";\n  static identifier = \"MediatypeParameter\";\n\n  #mediaTypeRegExp =\n    /^(?:[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]){1,127}\\/(?:[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]){1,127}$/;\n  #attributeRegExp = /^[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]+=[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]+$/;\n  #mediaValue;\n\n  get value() {\n    return Array.isArray(this.#mediaValue)\n      ? `\"${this.#mediaValue\n          .reduce((accumulated, current) => {\n            accumulated.push(current.repr());\n            return accumulated;\n          }, [])\n          .join(\";\")}\"`\n      : this.#mediaValue.repr();\n  }\n\n  get valueXML() {\n    return Array.isArray(this.#mediaValue)\n      ? \"<text>\" +\n          this.#mediaValue\n            .reduce((accumulated, current) => {\n              accumulated.push(current.reprXML());\n              return accumulated;\n            }, [])\n            .join(\";\")\n            .replace(/<\\/?text>/g, \"\") +\n          \"</text>\"\n      : this.#mediaValue.reprXML();\n  }\n\n  get valueJSON() {\n    if (Array.isArray(this.#mediaValue))\n      return [\n        \"text\",\n        this.#mediaValue\n          .reduce((accumulated, current) => {\n            accumulated.push(current.repr());\n            return accumulated;\n          }, [])\n          .join(\";\"),\n      ];\n\n    return this.#mediaValue.reprJSON();\n  }\n\n  #validate(mediaValue) {\n    if (typeof mediaValue === \"undefined\")\n      throw new MissingArgument(\n        \"Value for MediatypeParameter must be supplied\"\n      );\n    else if (\n      mediaValue.constructor.identifier !== \"TextType\" &&\n      Array.isArray(mediaValue) &&\n      !mediaValue.every((val) => val.constructor.identifier === \"TextType\")\n    )\n      throw new TypeError(\n        \"Value for MediatypeParameter must be of TextType or an array of TextTypes\"\n      );\n    else if (\n      !Array.isArray(mediaValue) &&\n      !this.#mediaTypeRegExp.test(mediaValue.repr())\n    )\n      throw new InvalidArgument(\"Invalid media type\");\n    else if (Array.isArray(mediaValue)) {\n      if (mediaValue.length !== 2)\n        throw new InvalidArgument(\n          \"Invalid value for MediatypeParameter. It should be an array with a length of 2\"\n        );\n      else if (!this.#mediaTypeRegExp.test(mediaValue[0].repr()))\n        throw new InvalidArgument(\"Invalid media type\");\n      else if (!this.#attributeRegExp.test(mediaValue[1].repr()))\n        throw new InvalidArgument(\"Invalid media type\");\n    }\n  }\n\n  constructor(mediaValue) {\n    super();\n\n    this.#validate(mediaValue);\n    this.#mediaValue = mediaValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(MediatypeParameter);\n"],"names":["_mediaTypeRegExp","WeakMap","_attributeRegExp","_mediaValue","_validate","WeakSet","MediatypeParameter","_BaseParameter","_inherits","_super","_createSuper","mediaValue","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","Array","isArray","_classPrivateFieldGet","concat","reduce","accumulated","current","push","repr","join","reprXML","replace","reprJSON","BaseParameter","MissingArgument","constructor","identifier","every","val","TypeError","test","InvalidArgument","length","_defineProperty"],"mappings":"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"}