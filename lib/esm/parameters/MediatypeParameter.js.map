{"version":3,"file":"MediatypeParameter.js","sources":["../../../src/parameters/MediatypeParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class MediatypeParameter extends BaseParameter {\n  static param = \"MEDIATYPE\";\n  static identifier = \"MediatypeParameter\";\n\n  #mediaTypeRegExp =\n    /^(?:[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]){1,127}\\/(?:[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]){1,127}$/;\n  #attributeRegExp = /^[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]+=[A-Za-z0-9!#\\$&\\.\\+\\-\\^_]+$/;\n  #mediaValue;\n\n  get value() {\n    return Array.isArray(this.#mediaValue)\n      ? `\"${this.#mediaValue\n          .reduce((accumulated, current) => {\n            accumulated.push(current.repr());\n            return accumulated;\n          }, [])\n          .join(\";\")}\"`\n      : this.#mediaValue.repr();\n  }\n\n  get valueXML() {\n    return Array.isArray(this.#mediaValue)\n      ? \"<text>\" +\n          this.#mediaValue\n            .reduce((accumulated, current) => {\n              accumulated.push(current.reprXML());\n              return accumulated;\n            }, [])\n            .join(\";\")\n            .replace(/<\\/?text>/g, \"\") +\n          \"</text>\"\n      : this.#mediaValue.reprXML();\n  }\n\n  get valueJSON() {\n    if (Array.isArray(this.#mediaValue))\n      return [\n        \"text\",\n        this.#mediaValue\n          .reduce((accumulated, current) => {\n            accumulated.push(current.repr());\n            return accumulated;\n          }, [])\n          .join(\";\"),\n      ];\n\n    return this.#mediaValue.reprJSON();\n  }\n\n  #validate(mediaValue) {\n    if (typeof mediaValue === \"undefined\")\n      throw new MissingArgument(\n        \"Value for MediatypeParameter must be supplied\"\n      );\n    else if (\n      mediaValue.constructor.identifier !== \"TextType\" &&\n      Array.isArray(mediaValue) &&\n      !mediaValue.every((val) => val.constructor.identifier === \"TextType\")\n    )\n      throw new TypeError(\n        \"Value for MediatypeParameter must be of TextType or an array of TextTypes\"\n      );\n    else if (\n      !Array.isArray(mediaValue) &&\n      !this.#mediaTypeRegExp.test(mediaValue.repr())\n    )\n      throw new InvalidArgument(\"Invalid media type\");\n    else if (Array.isArray(mediaValue)) {\n      if (mediaValue.length !== 2)\n        throw new InvalidArgument(\n          \"Invalid value for MediatypeParameter. It should be an array with a length of 2\"\n        );\n      else if (!this.#mediaTypeRegExp.test(mediaValue[0].repr()))\n        throw new InvalidArgument(\"Invalid media type\");\n      else if (!this.#attributeRegExp.test(mediaValue[1].repr()))\n        throw new InvalidArgument(\"Invalid media type\");\n    }\n  }\n\n  constructor(mediaValue) {\n    super();\n\n    this.#validate(mediaValue);\n    this.#mediaValue = mediaValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(MediatypeParameter);\n"],"names":["MediatypeParameter","mediaValue","checkAbstractPropertiesAndMethods","Object","freeze","Array","isArray","reduce","accumulated","current","push","repr","join","reprXML","replace","reprJSON","BaseParameter","MissingArgument","constructor","identifier","every","val","TypeError","test","InvalidArgument","length"],"mappings":"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"}