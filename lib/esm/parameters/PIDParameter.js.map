{"version":3,"file":"PIDParameter.js","sources":["../../../src/parameters/PIDParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class PIDParameter extends BaseParameter {\n  static param = \"PID\";\n  static identifier = \"PIDParameter\";\n\n  #pidValue;\n  #pidRegExp = /^\\d+(?:\\.\\d+)?$/;\n\n  get value() {\n    return Array.isArray(this.#pidValue)\n      ? `${this.#pidValue\n          .reduce((accumulatedTypes, currentType) => {\n            if (Array.isArray(currentType)) {\n              accumulatedTypes.push(\n                currentType\n                  .reduce((accumType, currType) => {\n                    accumType.push(currType.repr());\n                    return accumType;\n                  }, [])\n                  .join(\".\")\n              );\n            } else accumulatedTypes.push(currentType.repr());\n\n            return accumulatedTypes;\n          }, [])\n          .join(\",\")}`\n      : this.#pidValue.repr();\n  }\n\n  get valueXML() {\n    const xml = Array.isArray(this.#pidValue)\n      ? `${this.#pidValue\n          .reduce((accumulatedTypes, currentType) => {\n            if (Array.isArray(currentType)) {\n              accumulatedTypes.push(\n                \"<integer>\" +\n                  currentType\n                    .reduce((accumType, currType) => {\n                      accumType.push(currType.repr());\n                      return accumType;\n                    }, [])\n                    .join(\".\") +\n                  \"</integer>\"\n              );\n            } else accumulatedTypes.push(currentType.reprXML());\n\n            return accumulatedTypes;\n          }, [])\n          .join(\"\")}`\n      : this.#pidValue.reprXML();\n\n    return xml.replaceAll(\"integer\", \"text\");\n  }\n\n  get valueJSON() {\n    if (Array.isArray(this.#pidValue)) {\n      const json = this.#pidValue.reduce((accumulatedTypes, currentType) => {\n        if (Array.isArray(currentType)) {\n          accumulatedTypes.push(\n            currentType\n              .reduce((accumType, currType) => {\n                accumType.push(currType.repr());\n                return accumType;\n              }, [])\n              .join(\".\")\n          );\n        } else accumulatedTypes.push(currentType.repr());\n\n        return accumulatedTypes;\n      }, []);\n\n      json.unshift(\"integer\");\n\n      return json;\n    }\n\n    return this.#pidValue.reprJSON();\n  }\n\n  #validate(pidValue) {\n    if (typeof pidValue === \"undefined\")\n      throw new MissingArgument(\"Value for PIDParameter must be supplied\");\n    else if (\n      !Array.isArray(pidValue) &&\n      pidValue.constructor.identifier !== \"IntegerType\"\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n    else if (\n      Array.isArray(pidValue) &&\n      !pidValue.every((val1) => {\n        if (Array.isArray(val1))\n          return val1.every(\n            (val2) => val2.constructor.identifier === \"IntegerType\"\n          );\n        return val1.constructor.identifier === \"IntegerType\";\n      })\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n  }\n\n  constructor(pidValue) {\n    super();\n\n    this.#validate(pidValue);\n    this.#pidValue = pidValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(PIDParameter);\n"],"names":["PIDParameter","pidValue","checkAbstractPropertiesAndMethods","Object","freeze","Array","isArray","reduce","accumulatedTypes","currentType","push","accumType","currType","repr","join","xml","reprXML","replaceAll","json","unshift","reprJSON","BaseParameter","MissingArgument","constructor","identifier","InvalidArgument","every","val1","val2"],"mappings":"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"}