{"version":3,"file":"PIDParameter.js","sources":["../../../src/parameters/PIDParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class PIDParameter extends BaseParameter {\n  static param = \"PID\";\n  static identifier = \"PIDParameter\";\n\n  #pidValue;\n  #pidRegExp = /^\\d+(?:\\.\\d+)?$/;\n\n  get value() {\n    return Array.isArray(this.#pidValue)\n      ? `${this.#pidValue\n          .reduce((accumulatedTypes, currentType) => {\n            if (Array.isArray(currentType)) {\n              accumulatedTypes.push(\n                currentType\n                  .reduce((accumType, currType) => {\n                    accumType.push(currType.repr());\n                    return accumType;\n                  }, [])\n                  .join(\".\")\n              );\n            } else accumulatedTypes.push(currentType.repr());\n\n            return accumulatedTypes;\n          }, [])\n          .join(\",\")}`\n      : this.#pidValue.repr();\n  }\n\n  get valueXML() {\n    const xml = Array.isArray(this.#pidValue)\n      ? `${this.#pidValue\n          .reduce((accumulatedTypes, currentType) => {\n            if (Array.isArray(currentType)) {\n              accumulatedTypes.push(\n                \"<integer>\" +\n                  currentType\n                    .reduce((accumType, currType) => {\n                      accumType.push(currType.repr());\n                      return accumType;\n                    }, [])\n                    .join(\".\") +\n                  \"</integer>\"\n              );\n            } else accumulatedTypes.push(currentType.reprXML());\n\n            return accumulatedTypes;\n          }, [])\n          .join(\"\")}`\n      : this.#pidValue.reprXML();\n\n    return xml.replaceAll(\"integer\", \"text\");\n  }\n\n  get valueJSON() {\n    if (Array.isArray(this.#pidValue)) {\n      const json = this.#pidValue.reduce((accumulatedTypes, currentType) => {\n        if (Array.isArray(currentType)) {\n          accumulatedTypes.push(\n            currentType\n              .reduce((accumType, currType) => {\n                accumType.push(currType.repr());\n                return accumType;\n              }, [])\n              .join(\".\")\n          );\n        } else accumulatedTypes.push(currentType.repr());\n\n        return accumulatedTypes;\n      }, []);\n\n      json.unshift(\"integer\");\n\n      return json;\n    }\n\n    return this.#pidValue.reprJSON();\n  }\n\n  #validate(pidValue) {\n    if (typeof pidValue === \"undefined\")\n      throw new MissingArgument(\"Value for PIDParameter must be supplied\");\n    else if (\n      !Array.isArray(pidValue) &&\n      pidValue.constructor.identifier !== \"IntegerType\"\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n    else if (\n      Array.isArray(pidValue) &&\n      !pidValue.every((val1) => {\n        if (Array.isArray(val1))\n          return val1.every(\n            (val2) => val2.constructor.identifier === \"IntegerType\"\n          );\n        return val1.constructor.identifier === \"IntegerType\";\n      })\n    )\n      throw new InvalidArgument(\"Invalid value for PIDParameter\");\n  }\n\n  constructor(pidValue) {\n    super();\n\n    this.#validate(pidValue);\n    this.#pidValue = pidValue;\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(PIDParameter);\n"],"names":["_pidValue","WeakMap","_pidRegExp","_validate","WeakSet","PIDParameter","_BaseParameter","_inherits","_super","_createSuper","pidValue","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","Array","isArray","_classPrivateFieldGet","concat","reduce","accumulatedTypes","currentType","push","accumType","currType","repr","join","xml","reprXML","replaceAll","json","unshift","reprJSON","BaseParameter","MissingArgument","constructor","identifier","InvalidArgument","every","val1","val2","_defineProperty"],"mappings":"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"}