{"version":3,"file":"TypeParameter.js","sources":["../../../src/parameters/TypeParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class TypeParameter extends BaseParameter {\n  static param = \"TYPE\";\n  static identifier = \"TypeParameter\";\n\n  #typeValue;\n\n  get value() {\n    return this.#typeValue.constructor.identifier === \"TextListType\"\n      ? `\"${this.#typeValue.repr()}\"`\n      : this.#typeValue.repr();\n  }\n\n  get valueXML() {\n    return this.#typeValue.reprXML();\n  }\n\n  get valueJSON() {\n    return this.#typeValue.reprJSON();\n  }\n\n  #typeRegExp =\n    /^(?:work|home|A-GNSS|A-GPS|AOA|best-guess|Cell|DBH|DBH_HELO|Derived|Device-Assisted_A-GPS|Device-Assisted_EOTD|Device-Based_A-GPS|Device-Based_EOTD|DHCP|E-CID|ELS-BLE|ELS-WiFi|GNSS|GPS|Handset_AFLT|Handset_EFLT|Hybrid_A-GPS|hybridAGPS_AFLT|hybridCellSector_AGPS|hybridTDOA_AOA|hybridTDOA_AGPS|hybridTDOA_AGPS_AOA|IPDL|LLDP-MED|Manual|MBS|MPL|NEAD-BLE|NEAD-WiFi|networkRFFingerprinting|networkTDOA|networkTOA|NMR|OTDOA|RFID|RSSI|RSSI-RTT|RTT|TA|TA-NMR|Triangulation|UTDOA|Wiremap|802\\.11|x-[A-Za-z0-9]+)$/i;\n\n  #telTypeRegExp = /^(?:text|voice|fax|cell|video|pager|textphone|main)$/i;\n\n  #relatedTypeRegExp =\n    /(?:contact|acquaintance|friend|met|co-worker|colleague|co-resident|neighbor|child|parent|sibling|spouse|kin|muse|crush|date|sweetheart|me|agent|emergency)/i;\n\n  #validate(typeValue, targetProp) {\n    if (typeof typeValue === \"undefined\" || typeof targetProp === \"undefined\")\n      throw new MissingArgument(\n        \"Value and target property for TypeParameter must be supplied\"\n      );\n    else if (\n      typeValue.constructor.identifier !== \"TextType\" &&\n      typeValue.constructor.identifier !== \"TextListType\"\n    )\n      throw new TypeError(\n        \"Value for TypeParameter must be of type TextType or TextListType\"\n      );\n\n    const telre = new RegExp(\n      `(?:${this.#telTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n    const relatedre = new RegExp(\n      `(?:${this.#relatedTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n\n    switch (true) {\n      case /^TelProperty$/i.test(targetProp):\n        if (\n          !telre.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => telre.test(type))\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for TelProperty\"\n          );\n\n        break;\n      case /^RelatedProperty$/i.test(targetProp):\n        if (\n          !relatedre.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => relatedre.test(type))\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for RelatedProperty\"\n          );\n\n        break;\n      default:\n        if (\n          !this.#typeRegExp.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => this.#typeRegExp.test(type))\n        )\n          throw new InvalidArgument(\"Invalid value for TypeParameter\");\n    }\n  }\n\n  constructor(typeValue, targetProp) {\n    super();\n\n    this.#validate(typeValue, targetProp);\n    this.#typeValue = typeValue;\n\n    this.targetProp = targetProp.toUpperCase();\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(TypeParameter);\n"],"names":["_typeValue","WeakMap","_typeRegExp","_telTypeRegExp","_relatedTypeRegExp","_validate","WeakSet","TypeParameter","_BaseParameter","_inherits","_super","_createSuper","typeValue","targetProp","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","_classPrivateMethodGet","_validate2","_classPrivateFieldSet","toUpperCase","checkAbstractPropertiesAndMethods","Object","freeze","_createClass","key","get","_classPrivateFieldGet","constructor","identifier","concat","repr","reprXML","reprJSON","BaseParameter","_this2","MissingArgument","TypeError","telre","RegExp","source","relatedre","test","split","every","type","InvalidArgument","_defineProperty"],"mappings":"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"}