{"version":3,"file":"TypeParameter.js","sources":["../../../src/parameters/TypeParameter.js"],"sourcesContent":["import { BaseParameter } from \"./BaseParameter.js\";\nimport { MissingArgument, InvalidArgument } from \"../errors/index.js\";\n\nexport class TypeParameter extends BaseParameter {\n  static param = \"TYPE\";\n  static identifier = \"TypeParameter\";\n\n  #typeValue;\n\n  get value() {\n    return this.#typeValue.constructor.identifier === \"TextListType\"\n      ? `\"${this.#typeValue.repr()}\"`\n      : this.#typeValue.repr();\n  }\n\n  get valueXML() {\n    return this.#typeValue.reprXML();\n  }\n\n  get valueJSON() {\n    return this.#typeValue.reprJSON();\n  }\n\n  #typeRegExp =\n    /^(?:work|home|A-GNSS|A-GPS|AOA|best-guess|Cell|DBH|DBH_HELO|Derived|Device-Assisted_A-GPS|Device-Assisted_EOTD|Device-Based_A-GPS|Device-Based_EOTD|DHCP|E-CID|ELS-BLE|ELS-WiFi|GNSS|GPS|Handset_AFLT|Handset_EFLT|Hybrid_A-GPS|hybridAGPS_AFLT|hybridCellSector_AGPS|hybridTDOA_AOA|hybridTDOA_AGPS|hybridTDOA_AGPS_AOA|IPDL|LLDP-MED|Manual|MBS|MPL|NEAD-BLE|NEAD-WiFi|networkRFFingerprinting|networkTDOA|networkTOA|NMR|OTDOA|RFID|RSSI|RSSI-RTT|RTT|TA|TA-NMR|Triangulation|UTDOA|Wiremap|802\\.11|x-[A-Za-z0-9]+)$/i;\n\n  #telTypeRegExp = /^(?:text|voice|fax|cell|video|pager|textphone|main)$/i;\n\n  #relatedTypeRegExp =\n    /(?:contact|acquaintance|friend|met|co-worker|colleague|co-resident|neighbor|child|parent|sibling|spouse|kin|muse|crush|date|sweetheart|me|agent|emergency)/i;\n\n  #validate(typeValue, targetProp) {\n    if (typeof typeValue === \"undefined\" || typeof targetProp === \"undefined\")\n      throw new MissingArgument(\n        \"Value and target property for TypeParameter must be supplied\"\n      );\n    else if (\n      typeValue.constructor.identifier !== \"TextType\" &&\n      typeValue.constructor.identifier !== \"TextListType\"\n    )\n      throw new TypeError(\n        \"Value for TypeParameter must be of type TextType or TextListType\"\n      );\n\n    const telre = new RegExp(\n      `(?:${this.#telTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n    const relatedre = new RegExp(\n      `(?:${this.#relatedTypeRegExp.source}|${this.#typeRegExp.source})`,\n      \"i\"\n    );\n\n    switch (true) {\n      case /^TelProperty$/i.test(targetProp):\n        if (\n          !telre.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => telre.test(type))\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for TelProperty\"\n          );\n\n        break;\n      case /^RelatedProperty$/i.test(targetProp):\n        if (\n          !relatedre.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => relatedre.test(type))\n        )\n          throw new InvalidArgument(\n            \"Invalid value for TypeParameter for RelatedProperty\"\n          );\n\n        break;\n      default:\n        if (\n          !this.#typeRegExp.test(typeValue.repr()) &&\n          !typeValue\n            .repr()\n            .split(\",\")\n            .every((type) => this.#typeRegExp.test(type))\n        )\n          throw new InvalidArgument(\"Invalid value for TypeParameter\");\n    }\n  }\n\n  constructor(typeValue, targetProp) {\n    super();\n\n    this.#validate(typeValue, targetProp);\n    this.#typeValue = typeValue;\n\n    this.targetProp = targetProp.toUpperCase();\n\n    this.checkAbstractPropertiesAndMethods();\n    Object.freeze(this);\n  }\n}\n\nObject.freeze(TypeParameter);\n"],"names":["TypeParameter","typeValue","targetProp","toUpperCase","checkAbstractPropertiesAndMethods","Object","freeze","constructor","identifier","repr","reprXML","reprJSON","BaseParameter","MissingArgument","TypeError","telre","RegExp","source","relatedre","test","split","every","type","InvalidArgument"],"mappings":"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"}